package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"net/url"
	"time"
)

// getRoute ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
func getRoute(data Data) Route {
	rand.Seed(time.Now().UnixNano())

	route := Route{Points: []Point{data.Point}}
	timeLeft := data.Minutes
	totalDistance := 0.0 // –º–µ—Ç—Ä—ã
	totalTime := 0.0     // –º–∏–Ω—É—Ç—ã

	// —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö¬ª —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
	priorityAlias := map[string]string{
		"PEDESTRIAN":          "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è",
		"FOOD":                "–ö–∞—Ñ–µ",
		"GREEN_VALLEY":        "–ü–∞—Ä–∫",
		"ATTRACTIONS":         "–ü–∞–º—è—Ç–Ω–∏–∫",
		"MODERN_ARCHITECTURE": "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä",
	}

	priorityIndex := 5
	isPriorityLessThanZero := false

	for timeLeft > 0 {
		if isPriorityLessThanZero {
			priorityIndex = rand.Intn(5) + 1
		}

		typeStr := data.Priority[fmt.Sprintf("%d", priorityIndex)]
		last := route.Points[len(route.Points)-1]

		// –ë–µ—Ä—ë–º alias –Ω–∞ —Ä—É—Å—Å–∫–æ–º
		queryWord := priorityAlias[typeStr]
		if queryWord == "" {
			queryWord = typeStr // fallback: –≤–¥—Ä—É–≥ —á—Ç–æ‚Äë—Ç–æ –Ω–æ–≤–æ–µ –¥–æ–±–∞–≤–∏–ª–∏
		}

		fmt.Printf("‚Üí –∏—â—É —Ç–∏–ø: %s (%s)\n", typeStr, queryWord)
		name := findLocationByType(queryWord, last)
		fmt.Println("‚§∑ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è:", name)
		if name == "" {
			fmt.Println("‚ö†Ô∏è  findLocationByType –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
			priorityIndex--
			if priorityIndex <= 0 {
				isPriorityLessThanZero = true
			}
			continue
		}

		next := getPointFromName(name, data.City)
		fmt.Printf("‚§∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: %.6f, %.6f\n", next.X, next.Y)

		distance, travelMinutes := routeSegmentInfo(last, next, data.Speed)
		fmt.Printf("‚§∑ —Å–µ–≥–º–µ–Ω—Ç: %.1f‚ÄØ–º, %.1f‚ÄØ–º–∏–Ω\n", distance, travelMinutes)

		timeLeft -= int(travelMinutes)
		totalDistance += distance
		totalTime += travelMinutes

		if timeLeft > 0 {
			route.Points = append(route.Points, next)
		} else {
			break
		}

		priorityIndex--
		if priorityIndex <= 0 {
			isPriorityLessThanZero = true
		}
	}

	fmt.Printf("\n‚è±Ô∏è  –ò—Ç–æ–≥: %d‚ÄØ—Ç–æ—á–µ–∫, %.2f‚ÄØ–∫–º, %.1f‚ÄØ–º–∏–Ω\n",
		len(route.Points),
		totalDistance/1000,
		totalTime,
	)

	respPreview, _ := json.MarshalIndent(struct {
		Message  string  `json:"message"`
		Points   []Point `json:"points"`
		Distance float64 `json:"distance_km"`
		Duration float64 `json:"duration_min"`
	}{
		Message:  "‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ",
		Points:   route.Points,
		Distance: totalDistance / 1000,
		Duration: totalTime,
	}, "", "  ")
	fmt.Println("–û—Ç–≤–µ—Ç —Ñ—Ä–æ–Ω—Ç—É:\n", string(respPreview))

	return route
}

// findLocationByType –∏—â–µ—Ç –∏–º—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
func findLocationByType(priorityType string, start Point) string {
	base := "https://catalog.api.2gis.com/3.0/items"
	params := url.Values{}
	params.Set("q", priorityType)
	params.Set("location", fmt.Sprintf("%f,%f", start.Y, start.X))
	params.Set("suggest_type", "object")
	params.Set("key", "e50d3992-8076-47d8-bc3c-9add5a142f20")

	reqURL := fmt.Sprintf("%s?%s", base, params.Encode())
	fmt.Println("üåê findLocationByType:", reqURL)

	resp, err := http.Get(reqURL)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ findLocationByType:", err)
		return ""
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	if resp.StatusCode != http.StatusOK {
		fmt.Println("HTTP", resp.Status)
		return ""
	}

	var parsed struct {
		Result struct {
			Items []struct {
				Name string `json:"name"`
			} `json:"items"`
		} `json:"result"`
	}
	if err := json.Unmarshal(body, &parsed); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ findLocationByType:", err)
		return ""
	}
	if len(parsed.Result.Items) > 0 {
		return parsed.Result.Items[0].Name
	}
	return ""
}

// getPointFromName –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≥–æ—Ä–æ–¥—É
func getPointFromName(name, city string) Point {
	if name == "" {
		return Point{X: -1, Y: -1}
	}

	base := "https://catalog.api.2gis.com/3.0/items"
	params := url.Values{}
	params.Set("q", fmt.Sprintf("%s %s", city, name))
	params.Set("fields", "items.point")
	params.Set("key", "e50d3992-8076-47d8-bc3c-9add5a142f20")

	reqURL := fmt.Sprintf("%s?%s", base, params.Encode())
	resp, err := http.Get(reqURL)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ getPointFromName:", err)
		return Point{X: -1, Y: -1}
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	if resp.StatusCode != http.StatusOK {
		fmt.Println("HTTP", resp.Status)
		return Point{X: -1, Y: -1}
	}

	var parsed struct {
		Result struct {
			Items []struct {
				Point struct {
					Lat float64 `json:"lat"`
					Lon float64 `json:"lon"`
				} `json:"point"`
			} `json:"items"`
		} `json:"result"`
	}
	if err := json.Unmarshal(body, &parsed); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ getPointFromName:", err)
		return Point{X: -1, Y: -1}
	}
	if len(parsed.Result.Items) > 0 {
		p := parsed.Result.Items[0].Point
		return Point{X: p.Lat, Y: p.Lon}
	}
	return Point{X: -1, Y: -1}
}

// routeSegmentInfo –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ routing API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É/–≤—Ä–µ–º—è —Å–µ–≥–º–µ–Ω—Ç–∞
func routeSegmentInfo(start, end Point, speed int) (float64, float64) {
	urlStr := "https://routing.api.2gis.com/routing/7.0.0/global?key=e50d3992-8076-47d8-bc3c-9add5a142f20"

	body := map[string]any{
		"points": []map[string]any{
			{"type": "stop", "lon": start.Y, "lat": start.X},
			{"type": "stop", "lon": end.Y, "lat": end.X},
		},
		"transport": "walking",
		"params": map[string]any{
			"pedestrian": map[string]bool{"use_instructions": false},
		},
		"filters":        []string{"dirt_road", "ferry", "highway", "ban_stairway"},
		"output":         "summary",
		"locale":         "ru",
		"need_altitudes": true,
	}
	jsonData, _ := json.Marshal(body)

	req, _ := http.NewRequest(http.MethodPost, urlStr, bytes.NewBuffer(jsonData))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-App-Id", "ru.gishackathon.app03")

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ Routing API:", err)
		return 0, 0
	}
	defer resp.Body.Close()

	raw, _ := io.ReadAll(resp.Body)
	if resp.StatusCode != http.StatusOK {
		fmt.Println("HTTP", resp.Status)
		return 0, 0
	}

	var parsed struct {
		Status string `json:"status"`
		Result []struct {
			Length   float64 `json:"length"`
			Duration float64 `json:"duration"`
		} `json:"result"`
	}
	if err := json.Unmarshal(raw, &parsed); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Routing API:", err)
		return 0, 0
	}

	if parsed.Status == "OK" && len(parsed.Result) > 0 {
		length := parsed.Result[0].Length          // –º–µ—Ç—Ä—ã
		duration := parsed.Result[0].Duration / 60 // —Å–µ–∫—É–Ω–¥—ã ‚Üí –º–∏–Ω—É—Ç—ã
		if duration == 0 {
			if speed == 0 {
				speed = 5 // –∫–º/—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			}
			metersPerMinute := (float64(speed) * 1000) / 60
			duration = length / metersPerMinute
		}
		return length, duration
	}

	fmt.Println("‚ö†Ô∏è  Routing API –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
	return 0, 0
}
