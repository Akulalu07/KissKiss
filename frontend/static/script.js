// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
let map;
let markers = [];
const API_KEY = 'f416cc08-f627-4ac9-8709-aa1a86b0a7d4';
const moscow = [37.6173, 55.7558]; // –ú–æ—Å–∫–≤–∞! [–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞]

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞
let routeData = {
    coordinates: { lat: 55.7558, lng: 37.6173 },
    priorities: {
        "walking": { name: "–ü–µ—à–∏–π –º–∞—Ä—à—Ä—É—Ç", value: 0 },
        "food": { name: "–ï–¥–∞", value: 0 },
        "green": { name: "–ó–µ–ª–µ–Ω–∞—è —Ç—Ä–æ–ø–∞", value: 0 },
        "culture": { name: "–ü–∞–º—è—Ç–Ω–∏–∫–∏, –º—É–∑–µ–∏, –º–æ–Ω—É–º–µ–Ω—Ç—ã", value: 0 },
        "infrastructure": { name: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", value: 0 }
    },
    time: { hours: 1, minutes: 30 }
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(message, type) {
    const status = document.getElementById('status');
    if (status) {
        status.textContent = message;
        status.className = `status ${type}`;
    }
    console.log(`–°—Ç–∞—Ç—É—Å: ${message}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    try {
        updateStatus('–ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–∞—Ä—Ç...', 'loading');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
        if (typeof mapgl === 'undefined') {
            throw new Error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç 2GIS –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
        }

        updateStatus('–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ú–æ—Å–∫–≤—ã —Å —Ç–≤–æ–∏–º –∫–ª—é—á–æ–º...', 'loading');

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –∫–ª—é—á–æ–º - –¶–ï–ù–¢–† –ú–û–°–ö–í–´!
        map = new mapgl.Map('map-container', {
            center: moscow, // –ú–æ—Å–∫–≤–∞!
            zoom: 13,
            key: API_KEY
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
        map.on('load', () => {
            updateStatus('üéâ –ö–∞—Ä—Ç–∞ 2GIS –ú–æ—Å–∫–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Ö–∞–∫–∞—Ç—å!', 'success');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –≤ –ú–û–°–ö–í–ï!
            addMarker(moscow, 'üéØ –≠–ø–∏—Ü–µ–Ω—Ç—Ä —Ö–∞–∫–∞—Ç–æ–Ω–∞ –≤ –ú–æ—Å–∫–≤–µ! –¢—É—Ç –≤—Å–µ —Å—Ö–æ–¥—è—Ç —Å —É–º–∞');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
            map.on('click', (event) => {
                const coords = [event.lngLat.lng, event.lngLat.lat];
                const funnyMessages = [
                    "ü§Ø –¢—É—Ç —è —Å–ª–æ–º–∞–ª –º–æ–∑–≥ –≤ –ú–æ—Å–∫–≤–µ",
                    "üêõ –ó–¥–µ—Å—å –±—ã–ª –±–∞–≥ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏",
                    "üí• –í–∑—Ä—ã–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤ –≤ –º–µ—Ç—Ä–æ",
                    "üÜò SOS! –ü–æ–º–æ–≥–∏—Ç–µ! –Ø –≤ –ú–æ—Å–∫–≤–µ!",
                    "üëª –ü—Ä–∏–∑—Ä–∞–∫ –∫–æ–¥–∞ –≤ –û—Ö–æ—Ç–Ω–æ–º —Ä—è–¥—É",
                    "üíÄ –ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ–±–∫–∏ –Ω–∞ –°–∞–¥–æ–≤–æ–º",
                    "üéØ –ú–µ—Ç–∫–∞ –ø–∞–Ω–∏–∫–∏ —É –ö—Ä–µ–º–ª—è",
                    "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –¶–ê–û"
                ];
                const randomMessage = funnyMessages[Math.floor(Math.random() * funnyMessages.length)];
                addMarker(coords, `${randomMessage}\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${coords[0].toFixed(4)}, ${coords[1].toFixed(4)}`);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–∞—Ä—Ç—ã
        map.on('error', (error) => {
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã: ' + error.message, 'error');
        });

    } catch (error) {
        updateStatus('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message, 'error');
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
function addMarker(coordinates = null, label = '–ù–æ–≤–∞—è —Ç–æ—á–∫–∞ —Ö–∞–∫–∞—Ç–æ–Ω–∞ –≤ –ú–æ—Å–∫–≤–µ') {
    if (!map) {
        updateStatus('–ö–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å!', 'error');
        return;
    }
    
    // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä—è–¥–æ–º —Å –ú–û–°–ö–í–û–ô
    const coords = coordinates || [
        moscow[0] + (Math.random() - 0.5) * 0.02, // –¥–æ–ª–≥–æ—Ç–∞
        moscow[1] + (Math.random() - 0.5) * 0.02  // —à–∏—Ä–æ—Ç–∞
    ];
    
    try {
        const marker = new mapgl.Marker(map, {
            coordinates: coords,
            label: label,
            icon: 'https://docs.2gis.com/img/dot-marker.svg'
        });
        
        markers.push(marker);
        updateStatus(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä –≤ –ú–æ—Å–∫–≤–µ: ${label.split('\n')[0]}`, 'success');
        
    } catch (error) {
        updateStatus('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞: ' + error.message, 'error');
    }
}

// ===== –§–£–ù–ö–¶–ò–û–ù–ê–õ –°–ï–ö–¶–ò–ò "–û –°–ï–†–í–ò–°–ï" =====

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–µ–∫—Ü–∏–∏ "–û —Å–µ—Ä–≤–∏—Å–µ"
function initRouteSection() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞...');
    
    // 1. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
    document.getElementById('set-coordinates-btn').addEventListener('click', setCoordinatesOnMap);
    
    // 2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–∑—É–Ω–∫–æ–≤
    initPrioritySliders();
    
    // 3. –í—Ä–µ–º—è - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ +/-
    initTimeControls();
    
    // 4. –ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    document.getElementById('build-route-btn').addEventListener('click', buildRoute);
    
    console.log('‚úÖ –°–µ–∫—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// 1. –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
function setCoordinatesOnMap() {
    const latInput = document.getElementById('latitude');
    const lngInput = document.getElementById('longitude');
    
    const lat = parseFloat(latInput.value);
    const lng = parseFloat(lngInput.value);
    
    if (isNaN(lat) || isNaN(lng)) {
        updateStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!', 'error');
        return;
    }
    
    if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {
        updateStatus('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞!', 'error');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    routeData.coordinates = { lat, lng };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
    if (map) {
        addMarker([lng, lat], `üéØ –ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞\n–®–∏—Ä–æ—Ç–∞: ${lat}\n–î–æ–ª–≥–æ—Ç–∞: ${lng}`);
        map.setCenter([lng, lat]);
        map.setZoom(15);
    }
    
    updateStatus(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${lat}, ${lng}`, 'success');
}

// 2. –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–∑—É–Ω–∫–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
function initPrioritySliders() {
    const sliders = document.querySelectorAll('.priority-slider');
    
    sliders.forEach(slider => {
        const priorityKey = slider.getAttribute('data-priority');
        const valueDisplay = slider.nextElementSibling;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        valueDisplay.textContent = slider.value;
        routeData.priorities[priorityKey].value = parseInt(slider.value);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
        slider.addEventListener('input', function() {
            const value = parseInt(this.value);
            valueDisplay.textContent = value;
            routeData.priorities[priorityKey].value = value;
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø–æ–ª–∑—É–Ω–∫–∞
            updateSliderColor(this, value);
            
            console.log(`üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${routeData.priorities[priorityKey].name}" –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${value}`);
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç
        updateSliderColor(slider, parseInt(slider.value));
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ–ª–∑—É–Ω–∫–∞
function updateSliderColor(slider, value) {
    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
    slider.className = 'priority-slider';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
    if (value === 0) {
        slider.classList.add('priority-0');
    } else if (value <= 3) {
        slider.classList.add('priority-low');
    } else if (value <= 6) {
        slider.classList.add('priority-medium');
    } else {
        slider.classList.add('priority-high');
    }
}

// 3. –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º
function initTimeControls() {
    const hoursInput = document.getElementById('hours');
    const minutesInput = document.getElementById('minutes');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ +/-
    document.querySelectorAll('.time-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const type = this.getAttribute('data-type');
            const isPlus = this.classList.contains('plus');
            const input = document.getElementById(type);
            
            let value = parseInt(input.value);
            
            if (isPlus) {
                value = type === 'hours' ? Math.min(value + 1, 23) : Math.min(value + 1, 59);
            } else {
                value = type === 'hours' ? Math.max(value - 1, 0) : Math.max(value - 1, 0);
            }
            
            input.value = value;
            updateTimeDisplay();
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞
    hoursInput.addEventListener('input', updateTimeDisplay);
    minutesInput.addEventListener('input', updateTimeDisplay);
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    document.getElementById('apply-time-btn').addEventListener('click', function() {
        const hours = parseInt(hoursInput.value) || 0;
        const minutes = parseInt(minutesInput.value) || 0;
        
        routeData.time = { hours, minutes };
        updateStatus(`‚è∞ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${hours}—á ${minutes}–º–∏–Ω`, 'success');
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    updateTimeDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function updateTimeDisplay() {
    const hours = parseInt(document.getElementById('hours').value) || 0;
    const minutes = parseInt(document.getElementById('minutes').value) || 0;
    
    let displayText = '';
    if (hours > 0) {
        displayText += `${hours} —á–∞—Å${getRussianEnding(hours, ['', '–∞', '–æ–≤'])} `;
    }
    if (minutes > 0) {
        displayText += `${minutes} –º–∏–Ω—É—Ç${getRussianEnding(minutes, ['–∞', '—ã', ''])}`;
    }
    if (hours === 0 && minutes === 0) {
        displayText = '0 –º–∏–Ω—É—Ç';
    }
    
    document.getElementById('total-time').textContent = displayText.trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π
function getRussianEnding(number, endings) {
    number = number % 100;
    if (number >= 11 && number <= 19) {
        return endings[2];
    }
    number = number % 10;
    if (number === 1) {
        return endings[0];
    }
    if (number >= 2 && number <= 4) {
        return endings[1];
    }
    return endings[2];
}

// 4. –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
function buildRoute() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...', routeData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!routeData.coordinates) {
        updateStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!', 'error');
        return;
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ > 0)
    const activePriorities = Object.entries(routeData.priorities)
        .filter(([_, data]) => data.value > 0)
        .sort(([_, a], [__, b]) => b.value - a.value) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        .map(([key, data]) => `${data.value}/10 - ${data.name}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    const summaryHTML = `
        <h4>üìã –°–≤–æ–¥–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É:</h4>
        <div class="route-summary-item">
            <strong>üìç –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</strong><br>
            –®–∏—Ä–æ—Ç–∞: ${routeData.coordinates.lat}<br>
            –î–æ–ª–≥–æ—Ç–∞: ${routeData.coordinates.lng}
        </div>
        <div class="route-summary-item">
            <strong>‚è∞ –í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</strong> ${routeData.time.hours}—á ${routeData.time.minutes}–º–∏–Ω
        </div>
        <div class="route-summary-item">
            <strong>üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:</strong><br>
            ${activePriorities.length > 0 ? activePriorities.join('<br>') : '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}
        </div>
        <div class="route-summary-item">
            <strong>üìä –°—Ç–∞—Ç—É—Å:</strong> <span style="color: #27ae60;">–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ</span>
        </div>
    `;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    document.getElementById('route-summary').innerHTML = summaryHTML;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ (–¥–µ–º–æ-—Ñ—É–Ω–∫—Ü–∏—è)
    if (map) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        markers.forEach(marker => marker.destroy());
        markers = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        addMarker(
            [routeData.coordinates.lng, routeData.coordinates.lat], 
            `üöÄ –ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞\n–í—Ä–µ–º—è: ${routeData.time.hours}—á ${routeData.time.minutes}–º–∏–Ω\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: ${activePriorities.length}`
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        addRoutePointsByPriority();
    }
    
    updateStatus('üéâ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω! –°–º–æ—Ç—Ä–∏ —Å–≤–æ–¥–∫—É –Ω–∏–∂–µ.', 'success');
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
function addRoutePointsByPriority() {
    const baseLng = routeData.coordinates.lng;
    const baseLat = routeData.coordinates.lat;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Ç–æ—á–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    const pointTypes = [];
    
    if (routeData.priorities.food.value > 0) {
        pointTypes.push('üçï –ï–¥–∞');
    }
    if (routeData.priorities.culture.value > 0) {
        pointTypes.push('üèõÔ∏è –ö—É–ª—å—Ç—É—Ä–∞');
    }
    if (routeData.priorities.green.value > 0) {
        pointTypes.push('üå≥ –ü—Ä–∏—Ä–æ–¥–∞');
    }
    if (routeData.priorities.infrastructure.value > 0) {
        pointTypes.push('üè¢ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞');
    }
    if (routeData.priorities.walking.value > 0) {
        pointTypes.push('üö∂ –ü–µ—à–∏–π –º–∞—Ä—à—Ä—É—Ç');
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ç–æ—á–∫–∏
    const demoPoints = [
        { lng: baseLng + 0.005, lat: baseLat + 0.003, type: pointTypes[0] || 'üìç –¢–æ—á–∫–∞ 1' },
        { lng: baseLng + 0.01, lat: baseLat - 0.002, type: pointTypes[1] || 'üìç –¢–æ—á–∫–∞ 2' },
        { lng: baseLng + 0.008, lat: baseLat - 0.006, type: pointTypes[2] || 'üìç –¢–æ—á–∫–∞ 3' },
        { lng: baseLng + 0.012, lat: baseLat - 0.004, type: 'üèÅ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞' }
    ];
    
    demoPoints.forEach((point, index) => {
        setTimeout(() => {
            addMarker(
                [point.lng, point.lat], 
                `${point.type}\n–≠—Ç–∞–ø ${index + 1}`
            );
        }, index * 500);
    });
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    setTimeout(() => {
        map.setCenter([baseLng + 0.006, baseLat]);
        map.setZoom(14);
    }, demoPoints.length * 500);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ "–∫–∞—Ñ–µ" –≤ –ú–û–°–ö–í–ï (–¥–µ–º–æ-—Ñ—É–Ω–∫—Ü–∏—è)
function findCafe() {
    if (!map) {
        updateStatus('–ö–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å!', 'error');
        return;
    }
    
    updateStatus('üîç –ò—â–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥—ã—à–∫–∏ –≤ –ú–æ—Å–∫–≤–µ...', 'loading');
    
    // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ "–∫–∞—Ñ–µ" –≤ –ú–û–°–ö–í–ï
    const cafes = [
        { 
            coords: [37.6173, 55.7558], // –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            name: '‚òï –ö–æ—Ñ–µ–π–Ω—è "–£ –ö—Ä–µ–º–ª—è"',
            desc: '–ü—å–µ–º –∫–æ—Ñ–µ –∏ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –°–ø–∞—Å—Å–∫—É—é –±–∞—à–Ω—é'
        },
        { 
            coords: [37.6092, 55.7539], // –û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥
            name: 'üçï –ö–∞—Ñ–µ "–ö–æ–¥ –∏ –ü–µ–ª—å–º–µ–Ω–∏"',
            desc: '–ü–∏—à–µ–º –∫–æ–¥ –∏ –µ–¥–∏–º –ø–µ–ª—å–º–µ–Ω–∏ —É –ì–£–ú–∞'
        },
        { 
            coords: [37.6254, 55.7580], // –¢–≤–µ—Ä—Å–∫–∞—è
            name: 'ü•§ –ë–∞—Ä "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π JavaScript"',
            desc: '–û–±—Å—É–∂–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π'
        },
        { 
            coords: [37.6321, 55.7610], // –ü—É—à–∫–∏–Ω—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å
            name: 'üçî –§–∞—Å—Ç—Ñ—É–¥ "–ë–∞–≥–∏ –Ω–∞ –ü—É—à–∫–∏–Ω—Å–∫–æ–π"',
            desc: '–ò—Å–ø—Ä–∞–≤–ª—è–µ—à—å –±–∞–≥–∏ - –ø–æ–ª—É—á–∞–µ—à—å –±—É—Ä–≥–µ—Ä'
        },
        { 
            coords: [37.6005, 55.7480], // –ü–∞–≤–µ–ª–µ—Ü–∫–∞—è
            name: 'üç© –ü–æ–Ω—á–∏–∫–æ–≤–∞—è "React"',
            desc: '–ü–æ–Ω—á–∏–∫–∏ + React = —Å—á–∞—Å—Ç—å–µ'
        },
        { 
            coords: [37.6464, 55.7659], // –°–∞–¥–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ
            name: '‚òï –ö–æ—Ñ–µ "–í –ø—Ä–æ–±–∫–∞—Ö"',
            desc: '–ü—å–µ–º –∫–æ—Ñ–µ –ø–æ–∫–∞ —Å—Ç–æ–∏–º –≤ –ø—Ä–æ–±–∫–µ'
        }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–∞—Ñ–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    cafes.forEach((cafe, index) => {
        setTimeout(() => {
            addMarker(cafe.coords, `${cafe.name}\n${cafe.desc}`);
        }, index * 500);
    });
    
    setTimeout(() => {
        updateStatus('‚úÖ –ù–∞–π–¥–µ–Ω–æ 6 –º–æ—Å–∫–æ–≤—Å–∫–∏—Ö –º–µ—Å—Ç –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è!', 'success');
    }, cafes.length * 500);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Å—Ç –ú–æ—Å–∫–≤—ã
function showMoscowPlaces() {
    if (!map) return;
    
    updateStatus('üèõÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—é –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –ú–æ—Å–∫–≤—ã...', 'loading');
    
    const moscowPlaces = [
        {
            coords: [37.6230, 55.7539], // –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            name: 'üèõÔ∏è –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å',
            desc: '–¢—É—Ç –ú–∏–Ω–∏–Ω –∏ –ü–æ–∂–∞—Ä—Å–∫–∏–π —Å—Ç–æ—è–ª–∏'
        },
        {
            coords: [37.6173, 55.7517], // –ö—Ä–µ–º–ª—å
            name: 'üè∞ –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å',
            desc: '–¢—É—Ç –ü—É—Ç–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç'
        },
        {
            coords: [37.6049, 55.7413], // –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ
            name: 'üå≥ –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ',
            desc: '–¢—É—Ç –≤—Å–µ –±–µ–≥–∞—é—Ç –∏ –∫–∞—Ç–∞—é—Ç—Å—è –Ω–∞ –≤–µ–ª–∏–∫–∞—Ö'
        },
        {
            coords: [37.6558, 55.7903], // –í–î–ù–•
            name: 'üé™ –í–î–ù–•',
            desc: '–¢—É—Ç —Ñ–æ–Ω—Ç–∞–Ω –∏ —Ä–∞–∫–µ—Ç–∞'
        },
        {
            coords: [37.6790, 55.7241], // –ú–ì–£
            name: 'üéì –ú–ì–£',
            desc: '–¢—É—Ç —É–º–Ω—ã–µ –ª—é–¥–∏'
        },
        {
            coords: [37.5345, 55.8304], // –°–∫–æ–ª–∫–æ–≤–æ
            name: 'üí° –°–∫–æ–ª–∫–æ–≤–æ',
            desc: '–¢—É—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã'
        },
        {
            coords: [37.5530, 55.7030], // –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏
            name: 'üèôÔ∏è –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏',
            desc: '–¢—É—Ç –Ω–µ–±–æ—Å–∫—Ä–µ–±—ã –∏ –±–æ–≥–∞—Ç—ã–µ'
        },
        {
            coords: [37.6184, 55.7337], // –•—Ä–∞–º –•—Ä–∏—Å—Ç–∞ –°–ø–∞—Å–∏—Ç–µ–ª—è
            name: '‚õ™ –•—Ä–∞–º –•—Ä–∏—Å—Ç–∞ –°–ø–∞—Å–∏—Ç–µ–ª—è',
            desc: '–¢—É—Ç –º–æ–ª—è—Ç—Å—è –∑–∞ —É—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π'
        }
    ];
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => {
        try {
            marker.destroy();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', error);
        }
    });
    markers = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    moscowPlaces.forEach((place, index) => {
        setTimeout(() => {
            addMarker(place.coords, `${place.name}\n${place.desc}`);
        }, index * 300);
    });
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ú–æ—Å–∫–≤–µ
    map.setCenter(moscow);
    map.setZoom(11);
    
    setTimeout(() => {
        updateStatus('‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –ú–æ—Å–∫–≤—ã!', 'success');
    }, moscowPlaces.length * 300);
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã
function resetMap() {
    if (!map) return;
    
    if (confirm('–¢–æ—á–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—É? –í—Å–µ –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–æ–ø–∞–¥—É—Ç!')) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
        markers.forEach(marker => {
            try {
                marker.destroy();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', error);
            }
        });
        markers = [];
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ - –ú–û–°–ö–í–ê!
        map.setCenter(moscow);
        map.setZoom(13);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –≤ –ú–û–°–ö–í–ï
        setTimeout(() => {
            addMarker(moscow, 'üîÑ –ö–∞—Ä—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ –≤ –ú–æ—Å–∫–≤–µ!');
        }, 500);
        
        updateStatus('üóëÔ∏è –ö–∞—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ –ú–æ—Å–∫–≤–µ!', 'success');
    }
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∞–π—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π –ú–û–°–ö–í–´...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    initMap();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
    initRouteSection();
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—Ç—ã
    document.getElementById('add-marker-btn').addEventListener('click', function() {
        addMarker();
    });
    
    document.getElementById('find-cafe-btn').addEventListener('click', findCafe);
    document.getElementById('moscow-places-btn').addEventListener('click', showMoscowPlaces);
    document.getElementById('reset-map-btn').addEventListener('click', resetMap);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –≥–µ—Ä–æ–µ
    document.querySelector('.btn-primary').addEventListener('click', function() {
        updateStatus('ü§∑‚Äç‚ôÄÔ∏è –ß—É–∫ –Ω–µ–∂–Ω–æ –Ω–µ—Ç - –∏ –ø—Ä–∞–≤–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!', 'loading');
        setTimeout(() => {
            updateStatus('–ù–æ –º–∞—Ä—à—Ä—É—Ç –∏ –∫–∞—Ä—Ç–∞ –ú–û–°–ö–í–´ —Ä–∞–±–æ—Ç–∞—é—Ç! üéâ', 'success');
        }, 2000);
    });
    
    document.querySelector('.btn-secondary').addEventListener('click', function() {
        document.querySelector('#about').scrollIntoView({
            behavior: 'smooth'
        });
    });
    
    console.log('‚úÖ –°–∞–π—Ç —Å –∫–∞—Ä—Ç–æ–π –ú–û–°–ö–í–´ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –£–¥–∞—á–∏ –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ!');
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugMap = function() {
    console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('- –ö–∞—Ä—Ç–∞:', map ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    console.log('- –ú–∞—Ä–∫–µ—Ä—ã:', markers.length);
    console.log('- API –∫–ª—é—á:', API_KEY);
    console.log('- –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã:', moscow);
    console.log('- –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞:', routeData);
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
window.onerror = function(message, source, lineno, colno, error) {
    console.error('üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    updateStatus('üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + message, 'error');
};