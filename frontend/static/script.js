// script.js - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã

let map;
let markers = [];
let routePoints = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
let routeLines = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è –ª–∏–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–∞
const API_KEY = 'f416cc08-f627-4ac9-8709-aa1a86b0a7d4';
const moscow = [37.6173, 55.7558];

// –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
let routeData = {
    city: "moscow",
    coordinates: { lat: 55.7558, lng: 37.6173 },
    priorities: {
        "walking": { name: "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è", value: 3 },
        "food": { name: "–ï–¥–∞", value: 2 },
        "green": { name: "–ü–∞—Ä–∫", value: 1 },
        "culture": { name: "–ü–∞–º—è—Ç–Ω–∏–∫–∏, –º—É–∑–µ–∏, –º–æ–Ω—É–º–µ–Ω—Ç—ã", value: 4 },
        "infrastructure": { name: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", value: 5 },
        "speed": { name: "–°–∫–æ—Ä–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞", value: 3 }
    },
    time: { hours: 1, minutes: 30 },
    loop: true
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(message, type = 'info') {
    const status = document.getElementById('status');
    if (status) {
        status.textContent = message;
        status.className = `status ${type}`;
    }
    console.log(`–°—Ç–∞—Ç—É—Å: ${message}`);
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
function changeCity(cityId) {
    console.log('üîÑ –ú–µ–Ω—è–µ–º –≥–æ—Ä–æ–¥ –Ω–∞:', cityId);
    
    const city = citiesData[cityId];
    if (!city) {
        console.error('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω:', cityId);
        return false;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
    routeData.city = cityId;
    routeData.coordinates = { 
        lat: city.coordinates.lat, 
        lng: city.coordinates.lng 
    };
    
    console.log('üìå –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', routeData.coordinates);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ "–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞"
    const latInput = document.getElementById('latitude');
    const lngInput = document.getElementById('longitude');
    
    console.log('üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –≤–≤–æ–¥–∞:', { latInput: !!latInput, lngInput: !!lngInput });
    
    if (latInput && lngInput) {
        latInput.value = city.coordinates.lat.toFixed(6);
        lngInput.value = city.coordinates.lng.toFixed(6);
        console.log('‚úÖ –ü–æ–ª—è –≤–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', latInput.value, lngInput.value);
    } else {
        console.error('‚ùå –ü–æ–ª—è –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    const coordsDisplay = document.getElementById('city-coordinates-display');
    if (coordsDisplay) {
        coordsDisplay.textContent = `${city.coordinates.lat.toFixed(4)}, ${city.coordinates.lng.toFixed(4)}`;
        console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    }





    
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    if (map) {
        map.setCenter(city.center);
        map.setZoom(12);
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        clearMarkers();
        addMarker(city.center);
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    updateStatus(`üèôÔ∏è –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${city.name}. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞`, 'success');
    return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
function initCitySelect() {
    const citySelect = document.getElementById('city-select');
    if (!citySelect) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    citySelect.addEventListener('change', function() {
        const selectedCity = this.value;
        changeCity(selectedCity);
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –§–û–†–°–ò–†–£–ï–ú –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    citySelect.value = routeData.city;
    changeCity(routeData.city);
    
    console.log('‚úÖ –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    try {
        updateStatus('–ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–∞—Ä—Ç...', 'loading');
        
        if (typeof mapgl === 'undefined') {
            throw new Error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç 2GIS –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
        }

        console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á:', API_KEY);
        
        map = new mapgl.Map('map-container', {
            center: moscow,
            zoom: 13,
            key: API_KEY
        });

        map.on('load', () => {
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ 2GIS –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            // –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –ö–ê–†–¢–ï
            map.on('click', function(event) {
                const coordinates = [event.lngLat.lng, event.lngLat.lat];
                setStartPointFromMap(coordinates);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–∞—Ä—Ç—ã
        map.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã 2GIS:', error);
        });

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        updateStatus('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message, 'error');
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
function displayRoutePoints(points) {
    if (!map) {
        console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }
    
    console.log('üîÑ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', points);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –ª–∏–Ω–∏–∏
    clearRouteFromMap();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    routePoints = points;
    
    if (!points || points.length === 0) {
        updateStatus('‚ùå –ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
    points.forEach((point, index) => {
        try {
            const coordinates = [point.lat, point.lng];
            
            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
            const marker = new mapgl.Marker(map, {
                coordinates: coordinates,
                icon: createRoutePointIcon(index + 1), // –ò–∫–æ–Ω–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–æ—á–∫–∏
                size: [30, 30]
            });
            
            markers.push(marker);
            
            console.log(`‚úÖ –¢–æ—á–∫–∞ ${index + 1} –¥–æ–±–∞–≤–ª–µ–Ω–∞:`, coordinates);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ —Ç–æ—á–∫–∏ ${index + 1}:`, error);
        }
    });
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
    createRouteLines(points);
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    centerMapOnRoute(points);
    
    updateStatus(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω: ${points.length} —Ç–æ—á–µ–∫`, 'success');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–æ—á–∫–∏
function createRoutePointIcon(number) {
    // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –∏–∫–æ–Ω–∫–∏
    const canvas = document.createElement('canvas');
    const size = 30;
    canvas.width = size;
    canvas.height = size;
    const ctx = canvas.getContext('2d');
    
    // –†–∏—Å—É–µ–º –∫—Ä—É–≥
    ctx.beginPath();
    ctx.arc(size/2, size/2, size/2 - 2, 0, 2 * Math.PI);
    ctx.fillStyle = '#e74c3c';
    ctx.fill();
    ctx.strokeStyle = 'white';
    ctx.lineWidth = 2;
    ctx.stroke();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
    ctx.fillStyle = 'white';
    ctx.font = 'bold 14px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(number.toString(), size/2, size/2);
    
    return canvas.toDataURL();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–Ω–∏–π –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
function createRouteLines(points) {
    if (!map || points.length < 2) return;
    
    try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–ª–∏–Ω–∏—é —á–µ—Ä–µ–∑ –≤—Å–µ —Ç–æ—á–∫–∏
        const polyline = new mapgl.Polyline(map, {
            coordinates: points.map(point => [point.lng, point.lat]),
            color: '#3498db',
            width: 4
        });
        
        routeLines.push(polyline);
        console.log('‚úÖ –õ–∏–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
function centerMapOnRoute(points) {
    if (!map || points.length === 0) return;
    
    // –í—ã—á–∏—Å–ª—è–µ–º bounding box –≤—Å–µ—Ö —Ç–æ—á–µ–∫
    const lats = points.map(p => p.lat);
    const lngs = points.map(p => p.lng);
    
    const minLat = Math.min(...lats);
    const maxLat = Math.max(...lats);
    const minLng = Math.min(...lngs);
    const maxLng = Math.max(...lngs);
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ –º–∞—Ä—à—Ä—É—Ç–∞
    const centerLat = (minLat + maxLat) / 2;
    const centerLng = (minLng + maxLng) / 2;
    
    // –í—ã—á–∏—Å–ª—è–µ–º zoom —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏
    const latDiff = maxLat - minLat;
    const lngDiff = maxLng - minLng;
    const maxDiff = Math.max(latDiff, lngDiff);
    
    let zoom = 13;
    if (maxDiff < 0.01) zoom = 15;
    else if (maxDiff < 0.02) zoom = 14;
    else if (maxDiff > 0.1) zoom = 11;
    else if (maxDiff > 0.05) zoom = 12;
    
    map.setCenter([centerLng, centerLat]);
    map.setZoom(zoom);
    
    console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –∫–∞—Ä—Ç—ã
function clearRouteFromMap() {
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –∫–∞—Ä—Ç—ã');
    
    // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
    markers.forEach(marker => {
        try {
            marker.destroy();
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞:', error);
        }
    });
    markers = [];
    
    // –û—á–∏—â–∞–µ–º –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    routeLines.forEach(line => {
        try {
            line.destroy();
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∏–Ω–∏–∏:', error);
        }
    });
    routeLines = [];
    
    routePoints = [];
}









// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function handleServerResponse(serverResponse) {
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', serverResponse);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
    showRouteSummary();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    showServerResponseSummary(serverResponse);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    processRoutePointsFromServer(serverResponse);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function processRoutePointsFromServer(serverResponse) {
    if (serverResponse.points && Array.isArray(serverResponse.points)) {
        console.log('üìç –ü–æ–ª—É—á–µ–Ω—ã —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', serverResponse.points);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ—á–∫–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const routePoints = serverResponse.points.map(point => {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {lat, lng} –∏–ª–∏ {x, y}
            if (point.lat !== undefined && point.lng !== undefined) {
                return { lat: point.lat, lng: point.lng };
            } else if (point.x !== undefined && point.y !== undefined) {
                return { lat: point.x, lng: point.y }; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: x=lat, y=lng
            } else if (point[0] !== undefined && point[1] !== undefined) {
                return { lng: point[0] , lat: point[1]}; // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ [lng, lat]
            }
            return null;
        }).filter(point => point !== null);
        
        if (routePoints.length > 0) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
            displayRoutePoints(routePoints);
        } else {
            // –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç, —Å—Ç—Ä–æ–∏–º –¥–µ–º–æ-–º–∞—Ä—à—Ä—É—Ç
            buildRouteOnMap();
        }
        
    } else {
        console.log('üìç –¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å—Ç—Ä–æ–∏–º –¥–µ–º–æ-–º–∞—Ä—à—Ä—É—Ç');
        // –°—Ç—Ä–æ–∏–º –¥–µ–º–æ-–º–∞—Ä—à—Ä—É—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        buildRouteOnMap();
    }
}








// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
function addMarker(coordinates = null) {
    if (!map) {
        console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return null;
    }
    
    try {
        console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä 2GIS —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', coordinates);
        
        const marker = new mapgl.Marker(map, {
            coordinates: coordinates
        });
        
        markers.push(marker);
        console.log('‚úÖ –ú–∞—Ä–∫–µ—Ä 2GIS —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
        return marker;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ 2GIS:', error);
        createAlternativeMarker(coordinates);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
function createAlternativeMarker(coordinates) {
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä');
    const [lng, lat] = coordinates;
    
    const mapContainer = document.getElementById('map-container');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä
    const oldMarker = document.getElementById('alternative-marker');
    if (oldMarker) {
        oldMarker.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
    const marker = document.createElement('div');
    marker.id = 'alternative-marker';
    marker.className = 'alternative-marker';
    marker.style.left = '50%';
    marker.style.top = '50%';
    
    mapContainer.style.position = 'relative';
    mapContainer.appendChild(marker);
    
    console.log('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä —Å–æ–∑–¥–∞–Ω');
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ —Å –∫–∞—Ä—Ç—ã
function setStartPointFromMap(coordinates) {
    console.log('üìç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', coordinates);
    const [lng, lat] = coordinates;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    routeData.coordinates = { lat, lng };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    const latInput = document.getElementById('latitude');
    const lngInput = document.getElementById('longitude');
    if (latInput && lngInput) {
        latInput.value = lat.toFixed(6);
        lngInput.value = lng.toFixed(6);
        console.log('‚úÖ –ü–æ–ª—è –≤–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    // –ú–µ–Ω—è–µ–º –≥–æ—Ä–æ–¥ –Ω–∞ "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–±–æ—Ä–µ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    const citySelect = document.getElementById('city-select');
    if (citySelect && citySelect.value !== 'custom') {
        citySelect.value = 'custom';
        routeData.city = 'custom';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ
    if (map) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        clearMarkers();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        const marker = addMarker([lng, lat]);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
        map.setCenter([lng, lat]);
        map.setZoom(15);
    }
    
    updateStatus(`üìç –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${lat.toFixed(6)}, ${lng.toFixed(6)}`, 'success');
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
function clearMarkers() {
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã');
    
    // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã 2GIS
    markers.forEach(marker => {
        try {
            marker.destroy();
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ 2GIS:', error);
        }
    });
    markers = [];
    
    // –û—á–∏—â–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä
    const altMarker = document.getElementById('alternative-marker');
    if (altMarker) {
        altMarker.remove();
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú –í–í–û–î–û–ú =====

// 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –ò–õ–ò —Å –∫–∞—Ä—Ç—ã
function setCoordinatesFromInput() {
    const latInput = document.getElementById('latitude');
    const lngInput = document.getElementById('longitude');
    
    if (!latInput || !lngInput) {
        updateStatus('‚ùå –ü–æ–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return false;
    }

    const lat = parseFloat(latInput.value.replace(',', '.'));
    const lng = parseFloat(lngInput.value.replace(',', '.'));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (isNaN(lat) || isNaN(lng)) {
        updateStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –ø–æ–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', 'error');
        return false;
    }

    if (lat < -90 || lat > 90) {
        updateStatus('‚ùå –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90', 'error');
        return false;
    }

    if (lng < -180 || lng > 180) {
        updateStatus('‚ùå –î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180', 'error');
        return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    routeData.coordinates = { lat, lng };
    
    // –ú–µ–Ω—è–µ–º –≥–æ—Ä–æ–¥ –Ω–∞ "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥" –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const citySelect = document.getElementById('city-select');
    if (citySelect && citySelect.value !== 'custom') {
        citySelect.value = 'custom';
        routeData.city = 'custom';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞
    const coordsDisplay = document.getElementById('city-coordinates-display');
    if (coordsDisplay) {
        coordsDisplay.textContent = `${lat.toFixed(4)}, ${lng.toFixed(4)}`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ
    if (map) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        markers.forEach(marker => marker.destroy());
        markers = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        addMarker([lng, lat]);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        map.setCenter([lng, lat]);
        map.setZoom(15);
    }

    updateStatus(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${lat.toFixed(6)}, ${lng.toFixed(6)}`, 'success');
    return true;
}

// 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
// 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
function setTimeFromInput() {
    const hoursInput = document.getElementById('hours');
    const minutesInput = document.getElementById('minutes');
    
    if (!hoursInput || !minutesInput) {
        updateStatus('‚ùå –ü–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return false;
    }

    const hours = parseInt(hoursInput.value);
    const minutes = parseInt(minutesInput.value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if (isNaN(hours) || isNaN(minutes)) {
        updateStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏', 'error');
        return false;
    }

    if (hours < 0 || hours > 4) { // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 23 –Ω–∞ 4
        updateStatus('‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 4', 'error');
        return false;
    }

    if (minutes < 0 || minutes > 59) {
        updateStatus('‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 59', 'error');
        return false;
    }

    if (hours === 0 && minutes === 0) {
        updateStatus('‚ùå –í—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0', 'error');
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–µ –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤)
    const totalMinutes = hours * 60 + minutes;
    if (totalMinutes > 240) { // 4 —á–∞—Å–∞ = 240 –º–∏–Ω—É—Ç
        updateStatus('‚ùå –û–±—â–µ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 4 —á–∞—Å–∞', 'error');
        return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    routeData.time = { hours, minutes };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateTimeDisplay();
    
    updateStatus(`‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${hours}—á ${minutes}–º–∏–Ω`, 'success');
    return true;
}

// 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
// 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
function setPrioritiesFromInput() {
    const priorities = ['walking', 'food', 'green', 'culture', 'infrastructure', 'speed'];
    const usedValues = new Set();
    let hasErrors = false;

    priorities.forEach(priority => {
        const input = document.querySelector(`[data-priority="${priority}"]`);
        if (!input) {
            console.error(`–ü–æ–ª–∑—É–Ω–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ${priority} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            hasErrors = true;
            return;
        }

        const value = parseInt(input.value);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (1-5 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö, 0-5 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        if (isNaN(value)) {
            updateStatus(`‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${routeData.priorities[priority].name}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º`, 'error');
            hasErrors = true;
            return;
        }

        if (priority !== 'speed') {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: 1-5
            if (value < 1 || value > 5) {
                updateStatus(`‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${routeData.priorities[priority].name}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5`, 'error');
                hasErrors = true;
                return;
            }
        } else {
            // –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏: 0-5
            if (value < 0 || value > 5) {
                updateStatus(`‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${routeData.priorities[priority].name}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 5`, 'error');
                hasErrors = true;
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–∫—Ä–æ–º–µ —Å–∫–æ—Ä–æ—Å—Ç–∏)
        if (priority !== 'speed' && usedValues.has(value)) {
            updateStatus(`‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${value}" —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏!`, 'error');
            hasErrors = true;
            return;
        }

        if (priority !== 'speed') {
            usedValues.add(value);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        routeData.priorities[priority].value = value;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞
        updateSliderDisplay(priority, value);
    });

    if (hasErrors) {
        return false;
    }

    updateStatus('‚úÖ –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 5)', 'success');
    return true;
}

// 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–π/–ª–∏–Ω–µ–π–Ω—ã–π)
function setLoopFromInput() {
    const loopYes = document.querySelector('input[name="loop-route"][value="yes"]');
    const loopNo = document.querySelector('input[name="loop-route"][value="no"]');
    
    if (!loopYes || !loopNo) {
        console.error('–†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return false;
    }
    
    routeData.loop = loopYes.checked;
    
    const loopType = routeData.loop ? '–∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–π' : '–ª–∏–Ω–µ–π–Ω—ã–π';
    updateStatus(`‚úÖ –¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${loopType}`, 'success');
    return true;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
function updateSliderDisplay(priority, value) {
    const slider = document.querySelector(`[data-priority="${priority}"]`);
    const valueDisplay = slider ? slider.nextElementSibling : null;
    
    if (valueDisplay) {
        valueDisplay.textContent = value;
        valueDisplay.title = getPriorityDescription(value);
    }
    if (slider) {
        slider.value = value;
        updateSliderColor(slider, value);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏
function getPriorityDescription(value) {
    const descriptions = {
        0: "–ù–µ –≤–∞–∂–Ω–æ",
        1: "–°–æ–≤—Å–µ–º –Ω–µ –≤–∞–∂–Ω–æ", 
        2: "–°–ª–∞–±–æ –≤–∞–∂–Ω–æ",
        3: "–°—Ä–µ–¥–Ω–µ –≤–∞–∂–Ω–æ",
        4: "–û—á–µ–Ω—å –≤–∞–∂–Ω–æ",
        5: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ"
    };
    return descriptions[value] || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
function getSpeedDescription(value) {
    const speedKmph = convertSpeedToKmph(value);
    const descriptions = {
        0: `–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ (${speedKmph} –∫–º/—á) - —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞`,
        1: `–ú–µ–¥–ª–µ–Ω–Ω–æ (${speedKmph} –∫–º/—á) - –Ω–µ—Å–ø–µ—à–Ω—ã–π —Ç–µ–º–ø`,
        2: `–°—Ä–µ–¥–Ω–µ-–º–µ–¥–ª–µ–Ω–Ω–æ (${speedKmph} –∫–º/—á) - –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ö–æ–¥—å–±–∞`, 
        3: `–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø (${speedKmph} –∫–º/—á) - –æ–±—ã—á–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞`,
        4: `–ë—ã—Å—Ç—Ä–æ (${speedKmph} –∫–º/—á) - —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è —Ö–æ–¥—å–±–∞`,
        5: `–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ (${speedKmph} –∫–º/—á) - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ç–µ–º–ø`
    };
    return descriptions[value] || `–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø (${convertSpeedToKmph(value)} –∫–º/—á)`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ–ª–∑—É–Ω–∫–∞ –¥–ª—è —à–∫–∞–ª—ã 0-5
function updateSliderColor(slider, value) {
    slider.className = 'priority-slider';
    
    const colorClasses = {
        0: 'priority-0',
        1: 'priority-1',
        2: 'priority-2', 
        3: 'priority-3',
        4: 'priority-4',
        5: 'priority-5'
    };
    
    slider.classList.add(colorClasses[value] || 'priority-0');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function updateTimeDisplay() {
    const hours = routeData.time.hours;
    const minutes = routeData.time.minutes;
    
    let displayText = '';
    if (hours > 0) {
        displayText += `${hours} —á–∞—Å${getRussianEnding(hours, ['', '–∞', '–æ–≤'])} `;
    }
    if (minutes > 0) {
        displayText += `${minutes} –º–∏–Ω—É—Ç${getRussianEnding(minutes, ['–∞', '—ã', ''])}`;
    }
    
    const timeDisplay = document.getElementById('total-time');
    if (timeDisplay) {
        timeDisplay.textContent = displayText.trim();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π
function getRussianEnding(number, endings) {
    number = number % 100;
    if (number >= 11 && number <= 19) {
        return endings[2];
    }
    number = number % 10;
    if (number === 1) {
        return endings[0];
    }
    if (number >= 2 && number <= 4) {
        return endings[1];
    }
    return endings[2];
}

// ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ú–ê–†–®–†–£–¢–ê =====

function buildRoute() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...', routeData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    if (!validateAllData()) {
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
    if (!setLoopFromInput()) {
        updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞', 'error');
        return;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    if (!validatePriorityUniqueness()) {
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    sendRouteDataToServer();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function sendRouteDataToServer() {
    updateStatus('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', 'loading');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
    const speedValue = convertSpeedToKmph(routeData.priorities.speed.value);
    
    const serverData = {
        point: {
            x: routeData.coordinates.lat,
            y: routeData.coordinates.lng
        },
        priority: {
            [routeData.priorities.green.value]: "GREEN_VALLEY",
            [routeData.priorities.culture.value]: "ATTRACTIONS",
            [routeData.priorities.infrastructure.value]: "MODERN_ARCHITECTURE",
            [routeData.priorities.walking.value]: "PEDESTRIAN",
            [routeData.priorities.food.value]: "FOOD"
        },
        city: routeData.city,
        speed: speedValue,
        minutes: routeData.time.hours * 60 + routeData.time.minutes,
        loop: routeData.loop
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', serverData);
    console.log('üèôÔ∏è –ì–æ—Ä–æ–¥:', routeData.city);
    console.log('üö∂ –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞:', routeData.priorities.speed.value, '‚Üí', speedValue, '–∫–º/—á');
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
    attemptServerRequest(serverData);
}



// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –∫–º/—á
function convertSpeedToKmph(speedValue) {
    const speedMap = {
        0: 1,   // 0 ‚Üí 1 –∫–º/—á
        1: 2,   // 1 ‚Üí 2 –∫–º/—á
        2: 3,   // 2 ‚Üí 3 –∫–º/—á
        3: 5,   // 3 ‚Üí 5 –∫–º/—á
        4: 10,  // 4 ‚Üí 10 –∫–º/—á
        5: 15   // 5 ‚Üí 15 –∫–º/—á
    };
    
    return speedMap[speedValue] || 5; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –∫–º/—á
}



function attemptServerRequest(serverData) {
    const attempts = [
        {
            name: '–ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
            url: 'http://127.0.0.1:8080/api/route',
            options: {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(serverData)
            }
        },
        {
            name: 'Localhost',
            url: 'http://localhost:8080/api/route',
            options: {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(serverData)
            }
        },
        {
            name: '–ë–µ–∑ CORS',
            url: 'http://127.0.0.1:8080/api/route',
            options: {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(serverData),
                mode: 'no-cors'
            }
        }
    ];
    
    tryAttempts(attempts, 0, serverData);
}

function tryAttempts(attempts, index, serverData) {
    if (index >= attempts.length) {
        // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
        console.log('üé≠ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º');
        updateStatus('üî∂ –î–µ–º–æ-—Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ', 'info');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ
        saveLocalRouteData(serverData);
        showRouteSummary();
        buildRouteOnMap();
        return;
    }
    
    const attempt = attempts[index];
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${index + 1}: ${attempt.name}`);
    
    updateStatus(`üì° ${attempt.name}...`, 'loading');
    
    fetch(attempt.url, attempt.options)
    .then(response => {
        if (attempt.options.mode === 'no-cors') {
            // –í —Ä–µ–∂–∏–º–µ no-cors –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (no-cors mode)');
            updateStatus('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (—Ä–µ–∂–∏–º no-cors)', 'success');
            handleServerResponse({message: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º (no-cors —Ä–µ–∂–∏–º)"});
            return;
        }
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:', data);
            updateStatus('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', 'success');
            handleServerResponse(data);
        }
    })
    .catch(error => {
        console.log(`‚ùå ${attempt.name} failed:`, error.message);
        
        // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
        setTimeout(() => {
            tryAttempts(attempts, index + 1, serverData);
        }, 500);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
function saveLocalRouteData(serverData) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    serverData.speedDebug = {
        value: routeData.priorities.speed.value,
        kmph: convertSpeedToKmph(routeData.priorities.speed.value),
        description: getSpeedDescription(routeData.priorities.speed.value)
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('lastRouteData', JSON.stringify(serverData));
    localStorage.setItem('lastRouteTimestamp', new Date().toISOString());
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ generateRoutePoints
    window.lastRouteData = serverData;
    
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ:', serverData);
    console.log('üö∂ –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', serverData.speedDebug);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function handleServerResponse(serverResponse) {
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', serverResponse);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
    showRouteSummary();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    showServerResponseSummary(serverResponse);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    processRoutePointsFromServer(serverResponse);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function processRoutePointsFromServer(serverResponse) {
    if (serverResponse.points && Array.isArray(serverResponse.points)) {
        console.log('üìç –ü–æ–ª—É—á–µ–Ω—ã —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', serverResponse.points);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ—á–∫–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const routePoints = serverResponse.points.map(point => {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {lat, lng} –∏–ª–∏ {x, y}
            if (point.lat !== undefined && point.lng !== undefined) {
                return { lat: point.lat, lng: point.lng };
            } else if (point.x !== undefined && point.y !== undefined) {
                return { lat: point.y, lng: point.x }; // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç x,y
            } else if (point[0] !== undefined && point[1] !== undefined) {
                return { lat: point[1], lng: point[0] }; // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ [lng, lat]
            }
            return null;
        }).filter(point => point !== null);
        
        if (routePoints.length > 0) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
            displayRoutePoints(routePoints);
        } else {
            // –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç, —Å—Ç—Ä–æ–∏–º –¥–µ–º–æ-–º–∞—Ä—à—Ä—É—Ç
            buildRouteOnMap();
        }
        
    } else {
        console.log('üìç –¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å—Ç—Ä–æ–∏–º –¥–µ–º–æ-–º–∞—Ä—à—Ä—É—Ç');
        // –°—Ç—Ä–æ–∏–º –¥–µ–º–æ-–º–∞—Ä—à—Ä—É—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        buildRouteOnMap();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
function showServerResponseSummary(serverResponse) {
    const summaryElement = document.getElementById('route-summary');
    
    let serverInfoHTML = '';
    let pointsInfo = '';
    
    if (serverResponse.points && Array.isArray(serverResponse.points)) {
        pointsInfo = `
            <div class="points-details" style="margin-top: 15px; padding: 10px; background: #e8f4fd; border-radius: 8px;">
                <h5>üìç –î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞:</h5>
                <div style="font-size: 0.9rem;">
                    <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:</strong> ${serverResponse.points.length}<br>
                    <strong>–ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å:</strong> ${serverResponse.distance ? serverResponse.distance + ' –∫–º' : '—Ä–∞—Å—á–µ—Ç...'}<br>
                    <strong>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</strong> ${serverResponse.duration ? serverResponse.duration + ' –º–∏–Ω' : '—Ä–∞—Å—á–µ—Ç...'}
                </div>
            </div>
        `;
    }
    
    if (serverResponse.message) {
        serverInfoHTML = `
            <div class="server-response" style="margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 10px; border-left: 5px solid #4CAF50;">
                <h4>üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:</h4>
                <div class="server-message" style="font-weight: bold; color: #2e7d32;">${serverResponse.message}</div>
                ${serverResponse.route ? '<div class="route-info">‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</div>' : ''}
                ${pointsInfo}
            </div>
        `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–≤–æ–¥–∫–µ
    const existingSummary = summaryElement.innerHTML;
    summaryElement.innerHTML = existingSummary + serverInfoHTML;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function validateAllData() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (!routeData.coordinates || !routeData.coordinates.lat || !routeData.coordinates.lng) {
        updateStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞', 'error');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    if (routeData.time.hours === 0 && routeData.time.minutes === 0) {
        updateStatus('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞', 'error');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (1-5)
    const priorities = Object.entries(routeData.priorities)
        .filter(([key]) => key !== 'speed');
    
    for (let [key, priority] of priorities) {
        if (priority.value < 1 || priority.value > 5) {
            updateStatus(`‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority.name}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5`, 'error');
            return false;
        }
    }
    
    return true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
function validatePriorityUniqueness() {
    const usedValues = new Set();
    const priorities = Object.entries(routeData.priorities)
        .filter(([key]) => key !== 'speed'); // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    
    for (let [_, priority] of priorities) {
        if (usedValues.has(priority.value)) {
            updateStatus(`‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority.value}" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑. –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏!`, 'error');
            return false;
        }
        usedValues.add(priority.value);
    }
    return true;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
// –ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
function showRouteSummary() {
    const activePriorities = Object.entries(routeData.priorities)
        .filter(([key, data]) => data.value > 0 && key !== 'speed')
        .sort(([_, a], [__, b]) => b.value - a.value)
        .map(([key, data]) => {
            const importance = getPriorityDescription(data.value);
            return `${data.value} - ${data.name} (${importance})`;
        });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const mainPriority = activePriorities.length > 0 ? activePriorities[0].split(' - ')[1] : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    
    const speedValue = routeData.priorities.speed.value;
    const speedKmph = convertSpeedToKmph(speedValue);
    const speedDescription = getSpeedDescription(speedValue);
    const loopType = routeData.loop ? 'üîÅ –ó–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–π (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É)' : '‚û°Ô∏è –õ–∏–Ω–µ–π–Ω—ã–π (–∑–∞–∫–æ–Ω—á–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ç–æ—á–∫–µ)';
    const cityName = citiesData[routeData.city]?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω';
    
    const summaryHTML = `
        <h4>üìã –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç</h4>
        <div class="route-summary-item">
            <strong>üèôÔ∏è –ì–æ—Ä–æ–¥:</strong> ${cityName}
        </div>
        <div class="route-summary-item">
            <strong>üìç –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</strong><br>
            –®–∏—Ä–æ—Ç–∞: ${routeData.coordinates.lat.toFixed(6)}<br>
            –î–æ–ª–≥–æ—Ç–∞: ${routeData.coordinates.lng.toFixed(6)}
        </div>
        <div class="route-summary-item">
            <strong>‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${routeData.time.hours}—á ${routeData.time.minutes}–º–∏–Ω
        </div>
        <div class="route-summary-item">
            <strong>üö∂ –°–∫–æ—Ä–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞:</strong> ${speedValue} - ${speedDescription}
        </div>
        <div class="route-summary-item">
            <strong>üìè –†–∞—Å—á–µ—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:</strong> ${speedKmph} –∫–º/—á
        </div>
        <div class="route-summary-item">
            <strong>üîÑ –¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞:</strong> ${loopType}
        </div>
        <div class="route-summary-item">
            <strong>üéØ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> ${mainPriority}
        </div>
        <div class="route-summary-item">
            <strong>üìä –®–∫–∞–ª–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏:</strong><br>
            ${activePriorities.length > 0 ? activePriorities.join('<br>') : '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}
        </div>
        <div class="priority-scale-info">
            <small>üìù –®–∫–∞–ª–∞: 0-–Ω–µ –≤–∞–∂–Ω–æ, 1-—Å–æ–≤—Å–µ–º –Ω–µ –≤–∞–∂–Ω–æ, 2-—Å–ª–∞–±–æ –≤–∞–∂–Ω–æ, 3-—Å—Ä–µ–¥–Ω–µ –≤–∞–∂–Ω–æ, 4-–æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, 5-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ</small>
        </div>
    `;
    
    document.getElementById('route-summary').innerHTML = summaryHTML;
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
function buildRouteOnMap() {
    if (!map) return;
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => marker.destroy());
    markers = [];
    
    const baseLng = routeData.coordinates.lng;
    const baseLat = routeData.coordinates.lat;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
    addMarker([baseLng, baseLat]);
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    map.setCenter([baseLng, baseLat]);
    map.setZoom(14);
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã
function resetMap() {
    if (!map) return;
    
    if (confirm('–¢–æ—á–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—É? –í—Å–µ –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–æ–ø–∞–¥—É—Ç!')) {
        markers.forEach(marker => marker.destroy());
        markers = [];
        map.setCenter(moscow);
        map.setZoom(13);
        updateStatus('üóëÔ∏è –ö–∞—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞!', 'success');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
function zoomOutMap() {
    if (map) {
        map.setZoom(11);
        updateStatus('üîç –ö–∞—Ä—Ç–∞ –æ—Ç–¥–∞–ª–µ–Ω–∞', 'success');
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====

function initRouteSection() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ –ü–ï–†–í–û–ô)
    initCitySelect();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('set-coordinates-btn').addEventListener('click', setCoordinatesFromInput);
    document.getElementById('apply-time-btn').addEventListener('click', setTimeFromInput);
    document.getElementById('build-route-btn').addEventListener('click', buildRoute);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–∑—É–Ω–∫–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    initPrioritySliders();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    initTimeControls();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    initLoopControls();
    
    console.log('‚úÖ –°–µ–∫—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
function initPrioritySliders() {
    const sliders = document.querySelectorAll('.priority-slider');
    
    sliders.forEach(slider => {
        const priorityKey = slider.getAttribute('data-priority');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        slider.value = routeData.priorities[priorityKey].value;
        updateSliderDisplay(priorityKey, routeData.priorities[priorityKey].value);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
        slider.addEventListener('input', function() {
            const value = parseInt(this.value);
            updateSliderDisplay(priorityKey, value);
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º
function initTimeControls() {
    const hoursInput = document.getElementById('hours');
    const minutesInput = document.getElementById('minutes');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    hoursInput.max = 4; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4 —á–∞—Å–∞
    minutesInput.max = 59;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ +/- 
    document.querySelectorAll('.time-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const type = this.getAttribute('data-type');
            const isPlus = this.classList.contains('plus');
            const input = document.getElementById(type);
            
            let value = parseInt(input.value);
            
            if (isPlus) {
                if (type === 'hours') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —á–∞—Å–æ–≤
                    const currentHours = parseInt(hoursInput.value);
                    const currentMinutes = parseInt(minutesInput.value);
                    if (currentHours < 4 || (currentHours === 4 && currentMinutes === 0)) {
                        value = Math.min(value + 1, 4);
                    }
                } else {
                    // –î–ª—è –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
                    const currentHours = parseInt(hoursInput.value);
                    const currentMinutes = parseInt(minutesInput.value);
                    const totalMinutes = currentHours * 60 + (currentMinutes + 1);
                    if (totalMinutes <= 240) {
                        value = Math.min(value + 1, 59);
                    }
                }
            } else {
                value = type === 'hours' ? Math.max(value - 1, 0) : Math.max(value - 1, 0);
            }
            
            input.value = value;
            updateTimeDisplay();
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    hoursInput.addEventListener('input', function() {
        let value = parseInt(this.value) || 0;
        if (value > 4) {
            this.value = 4;
            value = 4;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
        const minutes = parseInt(minutesInput.value) || 0;
        const totalMinutes = value * 60 + minutes;
        if (totalMinutes > 240) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è
            const maxMinutes = 240 - (value * 60);
            minutesInput.value = Math.min(minutes, maxMinutes);
        }
        
        updateTimeDisplay();
    });
    
    minutesInput.addEventListener('input', function() {
        let value = parseInt(this.value) || 0;
        if (value > 59) {
            this.value = 59;
            value = 59;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
        const hours = parseInt(hoursInput.value) || 0;
        const totalMinutes = hours * 60 + value;
        if (totalMinutes > 240) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è
            const maxHours = Math.floor((240 - value) / 60);
            hoursInput.value = maxHours;
            this.value = 240 - (maxHours * 60);
        }
        
        updateTimeDisplay();
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    updateTimeDisplay();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º
function initLoopControls() {
    const loopRadios = document.querySelectorAll('input[name="loop-route"]');
    
    loopRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.checked) {
                const loopType = this.value === 'yes' ? '–∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–π' : '–ª–∏–Ω–µ–π–Ω—ã–π';
                console.log(`üîÑ –¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${loopType}`);
            }
        });
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    document.querySelector('input[name="loop-route"][value="yes"]').checked = true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ citiesData –∑–∞–≥—Ä—É–∂–µ–Ω
    if (typeof citiesData === 'undefined') {
        console.error('‚ùå cities.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        updateStatus('‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –≥–æ—Ä–æ–¥–∞–º–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
    } else {
        console.log('‚úÖ cities.js –∑–∞–≥—Ä—É–∂–µ–Ω, –≥–æ—Ä–æ–¥–æ–≤:', Object.keys(citiesData).length);
    }
    
    initMap();
    initRouteSection();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—Ç—ã
    document.getElementById('moscow-places-btn').addEventListener('click', zoomOutMap);
    document.getElementById('reset-map-btn').addEventListener('click', resetMap);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –≥–µ—Ä–æ–µ
    document.querySelector('.btn-secondary').addEventListener('click', function() {
        document.querySelector('#about').scrollIntoView({
            behavior: 'smooth'
        });
    });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!');
});


// // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
// function buildRouteOnMap() {
//     if (!map) return;
    
//     console.log('üé≠ –°—Ç—Ä–æ–∏–º –¥–µ–º–æ-–º–∞—Ä—à—Ä—É—Ç');
    
//     // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
//     clearRouteFromMap();
    
//     const baseLng = routeData.coordinates.lng;
//     const baseLat = routeData.coordinates.lat;
//     // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤–æ–∫—Ä—É–≥ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
//     const demoPoints = [
//         { lat: baseLat, lng: baseLng }, // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
//         { lat: baseLat + 0.005, lng: baseLng + 0.005 },
//         { lat: baseLat + 0.008, lng: baseLng - 0.003 },
//         { lat: baseLat + 0.003, lng: baseLng - 0.008 },
//         { lat: baseLat - 0.004, lng: baseLng - 0.005 },
//         { lat: baseLat - 0.006, lng: baseLng + 0.002 }
//     ];
    
//     // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ–º–æ-—Ç–æ—á–∫–∏
//     displayRoutePoints(demoPoints);
    
//     updateStatus('üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º: –º–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏', 'info');
// }
