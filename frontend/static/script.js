// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
let map;
let markers = [];
const API_KEY = 'f416cc08-f627-4ac9-8709-aa1a86b0a7d4';
const moscow = [37.6173, 55.7558];

// –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
let routeData = {
    coordinates: { lat: 55.7558, lng: 37.6173 },
    priorities: {
        "walking": { name: "–ü–µ—à–∏–π –º–∞—Ä—à—Ä—É—Ç", value: 3 },
        "food": { name: "–ï–¥–∞", value: 2 },
        "green": { name: "–ó–µ–ª–µ–Ω–∞—è —Ç—Ä–æ–ø–∞", value: 1 },
        "culture": { name: "–ü–∞–º—è—Ç–Ω–∏–∫–∏, –º—É–∑–µ–∏, –º–æ–Ω—É–º–µ–Ω—Ç—ã", value: 4 },
        "infrastructure": { name: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", value: 5 }
    },
    time: { hours: 1, minutes: 30 }
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(message, type = 'info') {
    const status = document.getElementById('status');
    if (status) {
        status.textContent = message;
        status.className = `status status-${type}`;
    }
    console.log(`–°—Ç–∞—Ç—É—Å: ${message}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    try {
        updateStatus('–ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–∞—Ä—Ç...', 'loading');
        
        if (typeof mapgl === 'undefined') {
            throw new Error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç 2GIS –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
        }

        map = new mapgl.Map('map-container', {
            center: moscow,
            zoom: 13,
            key: API_KEY
        });

        map.on('load', () => {
            updateStatus('üéâ –ö–∞—Ä—Ç–∞ 2GIS –ú–æ—Å–∫–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!', 'success');
        });

    } catch (error) {
        updateStatus('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message, 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
function addMarker(coordinates = null) {
    if (!map) return null;
    
    try {
        const marker = new mapgl.Marker(map, {
            coordinates: coordinates
        });
        
        markers.push(marker);
        return marker;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', error);
        return null;
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú –í–í–û–î–û–ú =====

// 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
function setCoordinatesFromInput() {
    const latInput = document.getElementById('latitude');
    const lngInput = document.getElementById('longitude');
    
    if (!latInput || !lngInput) {
        updateStatus('‚ùå –ü–æ–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return false;
    }

    const lat = parseFloat(latInput.value.replace(',', '.'));
    const lng = parseFloat(lngInput.value.replace(',', '.'));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (isNaN(lat) || isNaN(lng)) {
        updateStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –ø–æ–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', 'error');
        return false;
    }

    if (lat < -90 || lat > 90) {
        updateStatus('‚ùå –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90', 'error');
        return false;
    }

    if (lng < -180 || lng > 180) {
        updateStatus('‚ùå –î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180', 'error');
        return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    routeData.coordinates = { lat, lng };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ
    if (map) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        markers.forEach(marker => marker.destroy());
        markers = [];
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        map.setCenter([lng, lat]);
        map.setZoom(15);
    }

    updateStatus(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${lat.toFixed(6)}, ${lng.toFixed(6)}`, 'success');
    return true;
}

// 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
function setTimeFromInput() {
    const hoursInput = document.getElementById('hours');
    const minutesInput = document.getElementById('minutes');
    
    if (!hoursInput || !minutesInput) {
        updateStatus('‚ùå –ü–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return false;
    }

    const hours = parseInt(hoursInput.value);
    const minutes = parseInt(minutesInput.value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if (isNaN(hours) || isNaN(minutes)) {
        updateStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏', 'error');
        return false;
    }

    if (hours < 0 || hours > 23) {
        updateStatus('‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23', 'error');
        return false;
    }

    if (minutes < 0 || minutes > 59) {
        updateStatus('‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 59', 'error');
        return false;
    }

    if (hours === 0 && minutes === 0) {
        updateStatus('‚ùå –í—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0', 'error');
        return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    routeData.time = { hours, minutes };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateTimeDisplay();
    
    updateStatus(`‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${hours}—á ${minutes}–º–∏–Ω`, 'success');
    return true;
}

// 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
function setPrioritiesFromInput() {
    const priorities = ['walking', 'food', 'green', 'culture', 'infrastructure'];
    const usedValues = new Set();
    let hasErrors = false;

    priorities.forEach(priority => {
        const input = document.querySelector(`[data-priority="${priority}"]`);
        if (!input) {
            console.error(`–ü–æ–ª–∑—É–Ω–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ${priority} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            hasErrors = true;
            return;
        }

        const value = parseInt(input.value);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (0-5)
        if (isNaN(value)) {
            updateStatus(`‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${routeData.priorities[priority].name}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º`, 'error');
            hasErrors = true;
            return;
        }

        if (value < 0 || value > 5) {
            updateStatus(`‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${routeData.priorities[priority].name}" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 5`, 'error');
            hasErrors = true;
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (value !== 0 && usedValues.has(value)) {
            updateStatus(`‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${value}" —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—Å–µ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏!`, 'error');
            hasErrors = true;
            return;
        }

        if (value !== 0) {
            usedValues.add(value);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        routeData.priorities[priority].value = value;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞
        updateSliderDisplay(priority, value);
    });

    if (hasErrors) {
        return false;
    }

    updateStatus('‚úÖ –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 5)', 'success');
    return true;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
function updateSliderDisplay(priority, value) {
    const slider = document.querySelector(`[data-priority="${priority}"]`);
    const valueDisplay = slider ? slider.nextElementSibling : null;
    
    if (valueDisplay) {
        valueDisplay.textContent = value;
        valueDisplay.title = getPriorityDescription(value);
    }
    if (slider) {
        slider.value = value;
        updateSliderColor(slider, value);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏
function getPriorityDescription(value) {
    const descriptions = {
        0: "–ù–µ –≤–∞–∂–Ω–æ",
        1: "–°–æ–≤—Å–µ–º –Ω–µ –≤–∞–∂–Ω–æ", 
        2: "–°–ª–∞–±–æ –≤–∞–∂–Ω–æ",
        3: "–°—Ä–µ–¥–Ω–µ –≤–∞–∂–Ω–æ",
        4: "–û—á–µ–Ω—å –≤–∞–∂–Ω–æ",
        5: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ"
    };
    return descriptions[value] || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ";
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ–ª–∑—É–Ω–∫–∞ –¥–ª—è —à–∫–∞–ª—ã 0-5
function updateSliderColor(slider, value) {
    slider.className = 'priority-slider';
    
    const colorClasses = {
        0: 'priority-0',
        1: 'priority-1',
        2: 'priority-2', 
        3: 'priority-3',
        4: 'priority-4',
        5: 'priority-5'
    };
    
    slider.classList.add(colorClasses[value] || 'priority-0');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function updateTimeDisplay() {
    const hours = routeData.time.hours;
    const minutes = routeData.time.minutes;
    
    let displayText = '';
    if (hours > 0) {
        displayText += `${hours} —á–∞—Å${getRussianEnding(hours, ['', '–∞', '–æ–≤'])} `;
    }
    if (minutes > 0) {
        displayText += `${minutes} –º–∏–Ω—É—Ç${getRussianEnding(minutes, ['–∞', '—ã', ''])}`;
    }
    
    const timeDisplay = document.getElementById('total-time');
    if (timeDisplay) {
        timeDisplay.textContent = displayText.trim();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π
function getRussianEnding(number, endings) {
    number = number % 100;
    if (number >= 11 && number <= 19) {
        return endings[2];
    }
    number = number % 10;
    if (number === 1) {
        return endings[0];
    }
    if (number >= 2 && number <= 4) {
        return endings[1];
    }
    return endings[2];
}

// ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ú–ê–†–®–†–£–¢–ê =====

function buildRoute() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...', routeData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    if (!validateAllData()) {
        return;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    if (!validatePriorityUniqueness()) {
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    sendRouteDataToServer();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π CORS
function sendRouteDataToServer() {
    updateStatus('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', 'loading');
    
    const serverData = {
        point: {
            x: routeData.coordinates.lng,
            y: routeData.coordinates.lat
        },
        priority: {
            FOOD: routeData.priorities.food.value,
            PEDESTRIAN: routeData.priorities.walking.value,
            MODERN_ARCHITECTURE: routeData.priorities.infrastructure.value,
            ATTRACTIONS: routeData.priorities.culture.value,
            GREEN_VALLEY: routeData.priorities.green.value
        },
        minutes: routeData.time.hours * 60 + routeData.time.minutes
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', serverData);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
    attemptServerRequest(serverData);
}

function attemptServerRequest(serverData) {
    const attempts = [
        {
            name: '–ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
            url: 'http://127.0.0.1:8080/api/route',
            options: {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(serverData),
                mode: 'cors'
            }
        },
        {
            name: 'Localhost',
            url: 'http://localhost:8080/api/route',
            options: {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(serverData)
            }
        },
        {
            name: '–ë–µ–∑ CORS',
            url: 'http://127.0.0.1:8080/api/route',
            options: {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(serverData),
                mode: 'no-cors' // –≠—Ç–æ—Ç —Ä–µ–∂–∏–º –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ
            }
        }
    ];
    
    tryAttempts(attempts, 0, serverData);
}

function tryAttempts(attempts, index, serverData) {
    if (index >= attempts.length) {
        // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
        console.log('üé≠ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º');
        updateStatus('üî∂ –î–µ–º–æ-—Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ', 'info');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ
        saveLocalRouteData(serverData);
        showRouteSummary();
        buildRouteOnMap();
        return;
    }
    
    const attempt = attempts[index];
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${index + 1}: ${attempt.name}`);
    
    updateStatus(`üì° ${attempt.name}...`, 'loading');
    
    fetch(attempt.url, attempt.options)
    .then(response => {
        if (attempt.options.mode === 'no-cors') {
            // –í —Ä–µ–∂–∏–º–µ no-cors –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (no-cors mode)');
            updateStatus('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (—Ä–µ–∂–∏–º no-cors)', 'success');
            handleServerResponse({message: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º (no-cors —Ä–µ–∂–∏–º)"});
            return;
        }
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:', data);
            updateStatus('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', 'success');
            handleServerResponse(data);
        }
    })
    .catch(error => {
        console.log(`‚ùå ${attempt.name} failed:`, error.message);
        
        // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
        setTimeout(() => {
            tryAttempts(attempts, index + 1, serverData);
        }, 500);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
function saveLocalRouteData(serverData) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('lastRouteData', JSON.stringify(serverData));
    localStorage.setItem('lastRouteTimestamp', new Date().toISOString());
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ generateRoutePoints
    window.lastRouteData = serverData;
    
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ:', serverData);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function handleServerResponse(serverResponse) {
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', serverResponse);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
    showRouteSummary();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    showServerResponseSummary(serverResponse);
    
    // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
    buildRouteOnMap();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
function showServerResponseSummary(serverResponse) {
    const summaryElement = document.getElementById('route-summary');
    
    let serverInfoHTML = '';
    
    if (serverResponse.message) {
        serverInfoHTML = `
            <div class="server-response" style="margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 10px; border-left: 5px solid #4CAF50;">
                <h4>üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:</h4>
                <div class="server-message" style="font-weight: bold; color: #2e7d32;">${serverResponse.message}</div>
                ${serverResponse.route ? '<div class="route-info">‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</div>' : ''}
                ${serverResponse.points ? `<div class="points-info">üìç –¢–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞: ${serverResponse.points.length}</div>` : ''}
            </div>
        `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–≤–æ–¥–∫–µ
    const existingSummary = summaryElement.innerHTML;
    summaryElement.innerHTML = existingSummary + serverInfoHTML;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function validateAllData() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (!routeData.coordinates || !routeData.coordinates.lat || !routeData.coordinates.lng) {
        updateStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞', 'error');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    if (routeData.time.hours === 0 && routeData.time.minutes === 0) {
        updateStatus('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞', 'error');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç > 0
    const hasActivePriorities = Object.values(routeData.priorities).some(p => p.value > 0);
    if (!hasActivePriorities) {
        updateStatus('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª—å—à–µ 0', 'error');
        return false;
    }
    
    return true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
function validatePriorityUniqueness() {
    const usedValues = new Set();
    const priorities = Object.values(routeData.priorities);
    
    for (let priority of priorities) {
        if (priority.value !== 0) {
            if (usedValues.has(priority.value)) {
                updateStatus(`‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç "${priority.value}" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑. –í—Å–µ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏!`, 'error');
                return false;
            }
            usedValues.add(priority.value);
        }
    }
    return true;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
function showRouteSummary() {
    const activePriorities = Object.entries(routeData.priorities)
        .filter(([_, data]) => data.value > 0)
        .sort(([_, a], [__, b]) => b.value - a.value)
        .map(([key, data]) => {
            const importance = getPriorityDescription(data.value);
            return `${data.value} - ${data.name} (${importance})`;
        });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const mainPriority = activePriorities.length > 0 ? activePriorities[0].split(' - ')[1] : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    
    const summaryHTML = `
        <h4>üìã –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç</h4>
        <div class="route-summary-item">
            <strong>üìç –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</strong><br>
            –®–∏—Ä–æ—Ç–∞: ${routeData.coordinates.lat.toFixed(6)}<br>
            –î–æ–ª–≥–æ—Ç–∞: ${routeData.coordinates.lng.toFixed(6)}
        </div>
        <div class="route-summary-item">
            <strong>‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${routeData.time.hours}—á ${routeData.time.minutes}–º–∏–Ω
        </div>
        <div class="route-summary-item">
            <strong>üéØ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> ${mainPriority}
        </div>
        <div class="route-summary-item">
            <strong>üìä –®–∫–∞–ª–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏:</strong><br>
            ${activePriorities.length > 0 ? activePriorities.join('<br>') : '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}
        </div>
        <div class="priority-scale-info">
            <small>üìù –®–∫–∞–ª–∞: 0-–Ω–µ –≤–∞–∂–Ω–æ, 1-—Å–æ–≤—Å–µ–º –Ω–µ –≤–∞–∂–Ω–æ, 2-—Å–ª–∞–±–æ –≤–∞–∂–Ω–æ, 3-—Å—Ä–µ–¥–Ω–µ –≤–∞–∂–Ω–æ, 4-–æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, 5-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ</small>
        </div>
    `;
    
    document.getElementById('route-summary').innerHTML = summaryHTML;
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
function buildRouteOnMap() {
    if (!map) return;
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => marker.destroy());
    markers = [];
    
    const baseLng = routeData.coordinates.lng;
    const baseLat = routeData.coordinates.lat;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
    addMarker([baseLng, baseLat]);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    // generateRoutePoints(baseLng, baseLat);
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    map.setCenter([baseLng, baseLat]);
    map.setZoom(14);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
// function generateRoutePoints(baseLng, baseLat) {
//     // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
//     const sortedPriorities = Object.entries(routeData.priorities)
//         .filter(([_, data]) => data.value > 0)
//         .sort(([_, a], [__, b]) => b.value - a.value);
    
//     // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
//     sortedPriorities.forEach(([priority, data], index) => {
//         const offset = (index + 1) * 0.003;
//         setTimeout(() => {
//             addMarker([baseLng + offset, baseLat + offset]);
//         }, index * 800);
//     });
    
//     // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
//     if (sortedPriorities.length > 0) {
//         setTimeout(() => {
//             const finalOffset = (sortedPriorities.length + 1) * 0.003;
//             addMarker([baseLng + finalOffset, baseLat + finalOffset]);
//         }, sortedPriorities.length * 800);
//     }
// }

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã
function resetMap() {
    if (!map) return;
    
    if (confirm('–¢–æ—á–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—É? –í—Å–µ –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–æ–ø–∞–¥—É—Ç!')) {
        markers.forEach(marker => marker.destroy());
        markers = [];
        map.setCenter(moscow);
        map.setZoom(13);
        updateStatus('üóëÔ∏è –ö–∞—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞!', 'success');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
function zoomOutMap() {
    if (map) {
        map.setZoom(11);
        updateStatus('üîç –ö–∞—Ä—Ç–∞ –æ—Ç–¥–∞–ª–µ–Ω–∞', 'success');
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====

function initRouteSection() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('set-coordinates-btn').addEventListener('click', setCoordinatesFromInput);
    document.getElementById('apply-time-btn').addEventListener('click', setTimeFromInput);
    document.getElementById('build-route-btn').addEventListener('click', buildRoute);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–∑—É–Ω–∫–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    initPrioritySliders();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    initTimeControls();
    
    console.log('‚úÖ –°–µ–∫—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
function initPrioritySliders() {
    const sliders = document.querySelectorAll('.priority-slider');
    
    sliders.forEach(slider => {
        const priorityKey = slider.getAttribute('data-priority');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        slider.value = routeData.priorities[priorityKey].value;
        updateSliderDisplay(priorityKey, routeData.priorities[priorityKey].value);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞
        slider.addEventListener('input', function() {
            const value = parseInt(this.value);
            updateSliderDisplay(priorityKey, value);
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º
function initTimeControls() {
    const hoursInput = document.getElementById('hours');
    const minutesInput = document.getElementById('minutes');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ +/-
    document.querySelectorAll('.time-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const type = this.getAttribute('data-type');
            const isPlus = this.classList.contains('plus');
            const input = document.getElementById(type);
            
            let value = parseInt(input.value);
            
            if (isPlus) {
                value = type === 'hours' ? Math.min(value + 1, 23) : Math.min(value + 1, 59);
            } else {
                value = type === 'hours' ? Math.max(value - 1, 0) : Math.max(value - 1, 0);
            }
            
            input.value = value;
            updateTimeDisplay();
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞
    hoursInput.addEventListener('input', updateTimeDisplay);
    minutesInput.addEventListener('input', updateTimeDisplay);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    updateTimeDisplay();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    initMap();
    initRouteSection();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—Ç—ã
    document.getElementById('moscow-places-btn').addEventListener('click', zoomOutMap);
    document.getElementById('reset-map-btn').addEventListener('click', resetMap);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –≥–µ—Ä–æ–µ
    document.querySelector('.btn-secondary').addEventListener('click', function() {
        document.querySelector('#about').scrollIntoView({
            behavior: 'smooth'
        });
    });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!');
});
